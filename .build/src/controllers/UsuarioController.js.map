{
  "version": 3,
  "sources": ["../../../src/controllers/UsuarioController.ts"],
  "sourcesContent": ["import { Request, Response } from 'express'\nimport { usuarioRepository } from '../repositories/usuarioRepository'\nconst bcrypt = require('bcrypt')\n\nexport class UsuarioController {\n\t// Criar Usuario\n\tasync create(req: Request, res: Response) {\n\t\tvar { nome, rg, cpf, endereco, email, telefone, senha, ativo } = req.body\n\n\t\tconst hashedPassword = await bcrypt.hash(req.body.senha, 15)\n\n\t\ttry {\n\t\t\tconst novoUsuario = usuarioRepository.create({ nome, rg, cpf, endereco, email, telefone, senha: hashedPassword, ativo })\n\t\t\tawait usuarioRepository.save(novoUsuario)\n\n\t\t\treturn res.status(201).json(novoUsuario)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\treturn res.status(500).json({ message: 'Internal Sever Error' })\n\t\t}\n\t}\n\n\t// Listar todos os usuarios\n\tasync list(req: Request, res: Response) {\n\t\ttry {\n\t\t\tconst usuario = await usuarioRepository.find({\n\t\t\t\tselect: ['id_usuario', 'nome', 'rg', 'cpf', 'endereco', 'email', 'telefone', 'ativo']\n\t\t\t})\n\n\t\t\treturn res.status(200).json(usuario)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\treturn res.status(500).json({ message: 'Internal Sever Error' })\n\t\t}\n\t}\n\n\t// Listar usuarios por id\n\tasync listById(req: Request, res: Response) {\n\t\tconst { id_usuario } = req.params;\n\n\t\ttry {\n\t\t\tconst usuario = await usuarioRepository.find({\n\t\t\t\tselect: ['id_usuario', 'nome', 'rg', 'cpf', 'endereco', 'email', 'telefone', 'ativo'],\n\t\t\t\twhere: {\n\t\t\t\t\tid_usuario: Number(id_usuario)\n\t\t\t\t}\n\t\t\t})\n\n\n\n\t\t\tif (!usuario) {\n\t\t\t\treturn res.status(404).json({ message: 'Usu\u00E1rio n\u00E3o encontrado' })\n\t\t\t}\n\n\t\t\treturn res.status(200).json(usuario)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\treturn res.status(500).json({ message: 'Internal Sever Error' })\n\t\t}\n\t}\n\n\t// Atualizar usuario\n\tasync update(req: Request, res: Response) {\n\t\tconst { id_usuario } = req.params;\n\t\tconst { nome, rg, cpf, endereco, email, telefone, ativo } = req.body\n\n\t\ttry {\n\t\t\tconst usuario = await usuarioRepository.findOneBy({\n\t\t\t\tid_usuario: Number(id_usuario)\n\t\t\t})\n\n\t\t\tif (!usuario) {\n\t\t\t\treturn res.status(404).json({ message: 'Usu\u00E1rio n\u00E3o encontrado' })\n\t\t\t}\n\n\t\t\tusuarioRepository.update(usuario, { nome, rg, cpf, endereco, email, telefone, ativo })\n\n\t\t\treturn res.status(200).end()\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\treturn res.status(500).json({ message: 'Internal Sever Error' })\n\t\t}\n\t}\n\n\t// Apagar usuario\n\tasync delete(req: Request, res: Response) {\n\t\tconst { id_usuario } = req.params;\n\n\n\t\tif (!(await usuarioRepository.findOneBy({ id_usuario: Number(id_usuario) }))) {\n\t\t\treturn res.status(404).json({ message: 'Usu\u00E1rio n\u00E3o encontrado' })\n\t\t}\n\n\t\tawait usuarioRepository.delete({ id_usuario: Number(id_usuario) })\n\n\t\treturn res.status(204).send()\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,+BAAkC;AAClC,MAAM,SAAS,QAAQ;AAEhB,wBAAwB;AAAA,QAExB,OAAO,KAAc,KAAe;AACzC,QAAI,EAAE,MAAM,IAAI,KAAK,UAAU,OAAO,UAAU,OAAO,UAAU,IAAI;AAErE,UAAM,iBAAiB,MAAM,OAAO,KAAK,IAAI,KAAK,OAAO;AAEzD,QAAI;AACH,YAAM,cAAc,2CAAkB,OAAO,EAAE,MAAM,IAAI,KAAK,UAAU,OAAO,UAAU,OAAO,gBAAgB;AAChH,YAAM,2CAAkB,KAAK;AAE7B,aAAO,IAAI,OAAO,KAAK,KAAK;AAAA,aACpB,OAAP;AACD,cAAQ,IAAI;AACZ,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAAA;AAAA,QAKnC,KAAK,KAAc,KAAe;AACvC,QAAI;AACH,YAAM,UAAU,MAAM,2CAAkB,KAAK;AAAA,QAC5C,QAAQ,CAAC,cAAc,QAAQ,MAAM,OAAO,YAAY,SAAS,YAAY;AAAA;AAG9E,aAAO,IAAI,OAAO,KAAK,KAAK;AAAA,aACpB,OAAP;AACD,cAAQ,IAAI;AACZ,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAAA;AAAA,QAKnC,SAAS,KAAc,KAAe;AAC3C,UAAM,EAAE,eAAe,IAAI;AAE3B,QAAI;AACH,YAAM,UAAU,MAAM,2CAAkB,KAAK;AAAA,QAC5C,QAAQ,CAAC,cAAc,QAAQ,MAAM,OAAO,YAAY,SAAS,YAAY;AAAA,QAC7E,OAAO;AAAA,UACN,YAAY,OAAO;AAAA;AAAA;AAMrB,UAAI,CAAC,SAAS;AACb,eAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGxC,aAAO,IAAI,OAAO,KAAK,KAAK;AAAA,aACpB,OAAP;AACD,cAAQ,IAAI;AACZ,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAAA;AAAA,QAKnC,OAAO,KAAc,KAAe;AACzC,UAAM,EAAE,eAAe,IAAI;AAC3B,UAAM,EAAE,MAAM,IAAI,KAAK,UAAU,OAAO,UAAU,UAAU,IAAI;AAEhE,QAAI;AACH,YAAM,UAAU,MAAM,2CAAkB,UAAU;AAAA,QACjD,YAAY,OAAO;AAAA;AAGpB,UAAI,CAAC,SAAS;AACb,eAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGxC,iDAAkB,OAAO,SAAS,EAAE,MAAM,IAAI,KAAK,UAAU,OAAO,UAAU;AAE9E,aAAO,IAAI,OAAO,KAAK;AAAA,aACf,OAAP;AACD,cAAQ,IAAI;AACZ,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAAA;AAAA,QAKnC,OAAO,KAAc,KAAe;AACzC,UAAM,EAAE,eAAe,IAAI;AAG3B,QAAI,CAAE,MAAM,2CAAkB,UAAU,EAAE,YAAY,OAAO,gBAAiB;AAC7E,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGxC,UAAM,2CAAkB,OAAO,EAAE,YAAY,OAAO;AAEpD,WAAO,IAAI,OAAO,KAAK;AAAA;AAAA;",
  "names": []
}
